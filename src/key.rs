use std::str::FromStr;

pub fn display_key(key: rdev::Key) -> &'static str {
	match key {
		rdev::Key::Alt => "Alt",
		rdev::Key::AltGr => "AltGr",
		rdev::Key::Backspace => "Backspace",
		rdev::Key::CapsLock => "CapsLock",
		rdev::Key::ControlLeft => "LCtrl",
		rdev::Key::ControlRight => "RCtrl",
		rdev::Key::Delete => "Delet",

		rdev::Key::UpArrow => "↑",
		rdev::Key::RightArrow => "→",
		rdev::Key::DownArrow => "↓",
		rdev::Key::LeftArrow => "←",

		rdev::Key::F1 => "F1",
		rdev::Key::F2 => "F2",
		rdev::Key::F3 => "F3",
		rdev::Key::F4 => "F4",
		rdev::Key::F5 => "F5",
		rdev::Key::F6 => "F6",
		rdev::Key::F7 => "F7",
		rdev::Key::F8 => "F8",
		rdev::Key::F9 => "F9",
		rdev::Key::F10 => "F10",
		rdev::Key::F11 => "F11",
		rdev::Key::F12 => "F12",

		rdev::Key::End => "End",
		rdev::Key::Escape => "Escape",
		rdev::Key::Home => "Home",
		rdev::Key::MetaLeft => "LMeta",
		rdev::Key::MetaRight => "RMeta",
		rdev::Key::PageDown => "↡",
		rdev::Key::PageUp => "↟",
		rdev::Key::Return => "↵",
		rdev::Key::ShiftLeft => "LShift",
		rdev::Key::ShiftRight => "RShift",
		rdev::Key::Space => "Space",
		rdev::Key::Tab => "Tab",
		rdev::Key::PrintScreen => "PrtSc",
		rdev::Key::ScrollLock => "ScrollLock",
		rdev::Key::Pause => "Pause",
		rdev::Key::NumLock => "NumLock",
		rdev::Key::BackQuote => "`",
		rdev::Key::Num1 => "1",
		rdev::Key::Num2 => "2",
		rdev::Key::Num3 => "3",
		rdev::Key::Num4 => "4",
		rdev::Key::Num5 => "5",
		rdev::Key::Num6 => "6",
		rdev::Key::Num7 => "7",
		rdev::Key::Num8 => "8",
		rdev::Key::Num9 => "9",
		rdev::Key::Num0 => "0",
		rdev::Key::Minus => "-",
		rdev::Key::Equal => "=",
		rdev::Key::KeyQ => "Q",
		rdev::Key::KeyW => "W",
		rdev::Key::KeyE => "E",
		rdev::Key::KeyR => "R",
		rdev::Key::KeyT => "T",
		rdev::Key::KeyY => "Y",
		rdev::Key::KeyU => "U",
		rdev::Key::KeyI => "I",
		rdev::Key::KeyO => "O",
		rdev::Key::KeyP => "P",
		rdev::Key::LeftBracket => "[",
		rdev::Key::RightBracket => "]",
		rdev::Key::KeyA => "A",
		rdev::Key::KeyS => "S",
		rdev::Key::KeyD => "D",
		rdev::Key::KeyF => "F",
		rdev::Key::KeyG => "G",
		rdev::Key::KeyH => "H",
		rdev::Key::KeyJ => "J",
		rdev::Key::KeyK => "K",
		rdev::Key::KeyL => "L",
		rdev::Key::SemiColon => ";",
		rdev::Key::Quote => "'",
		rdev::Key::BackSlash => "\\",
		rdev::Key::IntlBackslash => "\\ (intl)",
		rdev::Key::KeyZ => "Z",
		rdev::Key::KeyX => "X",
		rdev::Key::KeyC => "C",
		rdev::Key::KeyV => "V",
		rdev::Key::KeyB => "B",
		rdev::Key::KeyN => "N",
		rdev::Key::KeyM => "M",
		rdev::Key::Comma => ",",
		rdev::Key::Dot => ".",
		rdev::Key::Slash => "/",
		rdev::Key::Insert => "Ins",
		rdev::Key::KpReturn => "↵",
		rdev::Key::KpMinus => "-",
		rdev::Key::KpPlus => "+",
		rdev::Key::KpMultiply => "*",
		rdev::Key::KpDivide => "/",
		rdev::Key::Kp0 => "0",
		rdev::Key::Kp1 => "1",
		rdev::Key::Kp2 => "2",
		rdev::Key::Kp3 => "3",
		rdev::Key::Kp4 => "4",
		rdev::Key::Kp5 => "5",
		rdev::Key::Kp6 => "6",
		rdev::Key::Kp7 => "7",
		rdev::Key::Kp8 => "8",
		rdev::Key::Kp9 => "9",
		rdev::Key::KpDelete => "Del",
		rdev::Key::Function => "Fn",
		rdev::Key::Unknown(_) => "(?)",
	}
}

#[derive(Copy, Clone, PartialEq, Eq, Hash)]
pub struct OwoKey(pub rdev::Key);

impl FromStr for OwoKey {
	type Err = String;

	fn from_str(s: &str) -> Result<Self, Self::Err> {
		match s {
			"Alt" => Ok(Self(rdev::Key::Alt)),
			"AltGr" => Ok(Self(rdev::Key::AltGr)),
			"Backspace" => Ok(Self(rdev::Key::Backspace)),
			"CapsLock" => Ok(Self(rdev::Key::CapsLock)),
			"ControlLeft" => Ok(Self(rdev::Key::ControlLeft)),
			"ControlRight" => Ok(Self(rdev::Key::ControlRight)),
			"Delete" => Ok(Self(rdev::Key::Delete)),
			"DownArrow" => Ok(Self(rdev::Key::DownArrow)),
			"End" => Ok(Self(rdev::Key::End)),
			"Escape" => Ok(Self(rdev::Key::Escape)),
			"F1" => Ok(Self(rdev::Key::F1)),
			"F10" => Ok(Self(rdev::Key::F10)),
			"F11" => Ok(Self(rdev::Key::F11)),
			"F12" => Ok(Self(rdev::Key::F12)),
			"F2" => Ok(Self(rdev::Key::F2)),
			"F3" => Ok(Self(rdev::Key::F3)),
			"F4" => Ok(Self(rdev::Key::F4)),
			"F5" => Ok(Self(rdev::Key::F5)),
			"F6" => Ok(Self(rdev::Key::F6)),
			"F7" => Ok(Self(rdev::Key::F7)),
			"F8" => Ok(Self(rdev::Key::F8)),
			"F9" => Ok(Self(rdev::Key::F9)),
			"Home" => Ok(Self(rdev::Key::Home)),
			"LeftArrow" => Ok(Self(rdev::Key::LeftArrow)),
			"MetaLeft" => Ok(Self(rdev::Key::MetaLeft)),
			"MetaRight" => Ok(Self(rdev::Key::MetaRight)),
			"PageDown" => Ok(Self(rdev::Key::PageDown)),
			"PageUp" => Ok(Self(rdev::Key::PageUp)),
			"Return" => Ok(Self(rdev::Key::Return)),
			"RightArrow" => Ok(Self(rdev::Key::RightArrow)),
			"ShiftLeft" => Ok(Self(rdev::Key::ShiftLeft)),
			"ShiftRight" => Ok(Self(rdev::Key::ShiftRight)),
			"Space" => Ok(Self(rdev::Key::Space)),
			"Tab" => Ok(Self(rdev::Key::Tab)),
			"UpArrow" => Ok(Self(rdev::Key::UpArrow)),
			"PrintScreen" => Ok(Self(rdev::Key::PrintScreen)),
			"ScrollLock" => Ok(Self(rdev::Key::ScrollLock)),
			"Pause" => Ok(Self(rdev::Key::Pause)),
			"NumLock" => Ok(Self(rdev::Key::NumLock)),
			"BackQuote" => Ok(Self(rdev::Key::BackQuote)),
			"Num1" => Ok(Self(rdev::Key::Num1)),
			"Num2" => Ok(Self(rdev::Key::Num2)),
			"Num3" => Ok(Self(rdev::Key::Num3)),
			"Num4" => Ok(Self(rdev::Key::Num4)),
			"Num5" => Ok(Self(rdev::Key::Num5)),
			"Num6" => Ok(Self(rdev::Key::Num6)),
			"Num7" => Ok(Self(rdev::Key::Num7)),
			"Num8" => Ok(Self(rdev::Key::Num8)),
			"Num9" => Ok(Self(rdev::Key::Num9)),
			"Num0" => Ok(Self(rdev::Key::Num0)),
			"Minus" => Ok(Self(rdev::Key::Minus)),
			"Equal" => Ok(Self(rdev::Key::Equal)),
			"KeyQ" => Ok(Self(rdev::Key::KeyQ)),
			"KeyW" => Ok(Self(rdev::Key::KeyW)),
			"KeyE" => Ok(Self(rdev::Key::KeyE)),
			"KeyR" => Ok(Self(rdev::Key::KeyR)),
			"KeyT" => Ok(Self(rdev::Key::KeyT)),
			"KeyY" => Ok(Self(rdev::Key::KeyY)),
			"KeyU" => Ok(Self(rdev::Key::KeyU)),
			"KeyI" => Ok(Self(rdev::Key::KeyI)),
			"KeyO" => Ok(Self(rdev::Key::KeyO)),
			"KeyP" => Ok(Self(rdev::Key::KeyP)),
			"LeftBracket" => Ok(Self(rdev::Key::LeftBracket)),
			"RightBracket" => Ok(Self(rdev::Key::RightBracket)),
			"KeyA" => Ok(Self(rdev::Key::KeyA)),
			"KeyS" => Ok(Self(rdev::Key::KeyS)),
			"KeyD" => Ok(Self(rdev::Key::KeyD)),
			"KeyF" => Ok(Self(rdev::Key::KeyF)),
			"KeyG" => Ok(Self(rdev::Key::KeyG)),
			"KeyH" => Ok(Self(rdev::Key::KeyH)),
			"KeyJ" => Ok(Self(rdev::Key::KeyJ)),
			"KeyK" => Ok(Self(rdev::Key::KeyK)),
			"KeyL" => Ok(Self(rdev::Key::KeyL)),
			"SemiColon" => Ok(Self(rdev::Key::SemiColon)),
			"Quote" => Ok(Self(rdev::Key::Quote)),
			"BackSlash" => Ok(Self(rdev::Key::BackSlash)),
			"IntlBackslash" => Ok(Self(rdev::Key::IntlBackslash)),
			"KeyZ" => Ok(Self(rdev::Key::KeyZ)),
			"KeyX" => Ok(Self(rdev::Key::KeyX)),
			"KeyC" => Ok(Self(rdev::Key::KeyC)),
			"KeyV" => Ok(Self(rdev::Key::KeyV)),
			"KeyB" => Ok(Self(rdev::Key::KeyB)),
			"KeyN" => Ok(Self(rdev::Key::KeyN)),
			"KeyM" => Ok(Self(rdev::Key::KeyM)),
			"Comma" => Ok(Self(rdev::Key::Comma)),
			"Dot" => Ok(Self(rdev::Key::Dot)),
			"Slash" => Ok(Self(rdev::Key::Slash)),
			"Insert" => Ok(Self(rdev::Key::Insert)),
			"KpReturn" => Ok(Self(rdev::Key::KpReturn)),
			"KpMinus" => Ok(Self(rdev::Key::KpMinus)),
			"KpPlus" => Ok(Self(rdev::Key::KpPlus)),
			"KpMultiply" => Ok(Self(rdev::Key::KpMultiply)),
			"KpDivide" => Ok(Self(rdev::Key::KpDivide)),
			"Kp0" => Ok(Self(rdev::Key::Kp0)),
			"Kp1" => Ok(Self(rdev::Key::Kp1)),
			"Kp2" => Ok(Self(rdev::Key::Kp2)),
			"Kp3" => Ok(Self(rdev::Key::Kp3)),
			"Kp4" => Ok(Self(rdev::Key::Kp4)),
			"Kp5" => Ok(Self(rdev::Key::Kp5)),
			"Kp6" => Ok(Self(rdev::Key::Kp6)),
			"Kp7" => Ok(Self(rdev::Key::Kp7)),
			"Kp8" => Ok(Self(rdev::Key::Kp8)),
			"Kp9" => Ok(Self(rdev::Key::Kp9)),
			"KpDelete" => Ok(Self(rdev::Key::KpDelete)),
			"Function" => Ok(Self(rdev::Key::Function)),
			s => {
				// TODO: gracefully handle error

				if s.starts_with("code:") {
					let n = match s.split_once(':').unwrap().1.parse() {
						Ok(n) => n,
						Err(e) => return Err(format!("{:?} is not a valid key: {}", s, e)),
					};

					Ok(Self(rdev::Key::Unknown(n)))
				} else {
					Err(format!("{:?} is not a valid key!", s))
				}
			}
		}
	}
}

pub fn serialize_key(key: rdev::Key) -> String {
	match key {
		rdev::Key::Alt => "Alt".to_string(),
		rdev::Key::AltGr => "AltGr".to_string(),
		rdev::Key::Backspace => "Backspace".to_string(),
		rdev::Key::CapsLock => "CapsLock".to_string(),
		rdev::Key::ControlLeft => "ControlLeft".to_string(),
		rdev::Key::ControlRight => "ControlRight".to_string(),
		rdev::Key::Delete => "Delete".to_string(),
		rdev::Key::DownArrow => "DownArrow".to_string(),
		rdev::Key::End => "End".to_string(),
		rdev::Key::Escape => "Escape".to_string(),
		rdev::Key::F1 => "F1".to_string(),
		rdev::Key::F10 => "F10".to_string(),
		rdev::Key::F11 => "F11".to_string(),
		rdev::Key::F12 => "F12".to_string(),
		rdev::Key::F2 => "F2".to_string(),
		rdev::Key::F3 => "F3".to_string(),
		rdev::Key::F4 => "F4".to_string(),
		rdev::Key::F5 => "F5".to_string(),
		rdev::Key::F6 => "F6".to_string(),
		rdev::Key::F7 => "F7".to_string(),
		rdev::Key::F8 => "F8".to_string(),
		rdev::Key::F9 => "F9".to_string(),
		rdev::Key::Home => "Home".to_string(),
		rdev::Key::LeftArrow => "LeftArrow".to_string(),
		rdev::Key::MetaLeft => "MetaLeft".to_string(),
		rdev::Key::MetaRight => "MetaRight".to_string(),
		rdev::Key::PageDown => "PageDown".to_string(),
		rdev::Key::PageUp => "PageUp".to_string(),
		rdev::Key::Return => "Return".to_string(),
		rdev::Key::RightArrow => "RightArrow".to_string(),
		rdev::Key::ShiftLeft => "ShiftLeft".to_string(),
		rdev::Key::ShiftRight => "ShiftRight".to_string(),
		rdev::Key::Space => "Space".to_string(),
		rdev::Key::Tab => "Tab".to_string(),
		rdev::Key::UpArrow => "UpArrow".to_string(),
		rdev::Key::PrintScreen => "PrintScreen".to_string(),
		rdev::Key::ScrollLock => "ScrollLock".to_string(),
		rdev::Key::Pause => "Pause".to_string(),
		rdev::Key::NumLock => "NumLock".to_string(),
		rdev::Key::BackQuote => "BackQuote".to_string(),
		rdev::Key::Num1 => "Num1".to_string(),
		rdev::Key::Num2 => "Num2".to_string(),
		rdev::Key::Num3 => "Num3".to_string(),
		rdev::Key::Num4 => "Num4".to_string(),
		rdev::Key::Num5 => "Num5".to_string(),
		rdev::Key::Num6 => "Num6".to_string(),
		rdev::Key::Num7 => "Num7".to_string(),
		rdev::Key::Num8 => "Num8".to_string(),
		rdev::Key::Num9 => "Num9".to_string(),
		rdev::Key::Num0 => "Num0".to_string(),
		rdev::Key::Minus => "Minus".to_string(),
		rdev::Key::Equal => "Equal".to_string(),
		rdev::Key::KeyQ => "KeyQ".to_string(),
		rdev::Key::KeyW => "KeyW".to_string(),
		rdev::Key::KeyE => "KeyE".to_string(),
		rdev::Key::KeyR => "KeyR".to_string(),
		rdev::Key::KeyT => "KeyT".to_string(),
		rdev::Key::KeyY => "KeyY".to_string(),
		rdev::Key::KeyU => "KeyU".to_string(),
		rdev::Key::KeyI => "KeyI".to_string(),
		rdev::Key::KeyO => "KeyO".to_string(),
		rdev::Key::KeyP => "KeyP".to_string(),
		rdev::Key::LeftBracket => "LeftBracket".to_string(),
		rdev::Key::RightBracket => "RightBracket".to_string(),
		rdev::Key::KeyA => "KeyA".to_string(),
		rdev::Key::KeyS => "KeyS".to_string(),
		rdev::Key::KeyD => "KeyD".to_string(),
		rdev::Key::KeyF => "KeyF".to_string(),
		rdev::Key::KeyG => "KeyG".to_string(),
		rdev::Key::KeyH => "KeyH".to_string(),
		rdev::Key::KeyJ => "KeyJ".to_string(),
		rdev::Key::KeyK => "KeyK".to_string(),
		rdev::Key::KeyL => "KeyL".to_string(),
		rdev::Key::SemiColon => "SemiColon".to_string(),
		rdev::Key::Quote => "Quote".to_string(),
		rdev::Key::BackSlash => "BackSlash".to_string(),
		rdev::Key::IntlBackslash => "IntlBackslash".to_string(),
		rdev::Key::KeyZ => "KeyZ".to_string(),
		rdev::Key::KeyX => "KeyX".to_string(),
		rdev::Key::KeyC => "KeyC".to_string(),
		rdev::Key::KeyV => "KeyV".to_string(),
		rdev::Key::KeyB => "KeyB".to_string(),
		rdev::Key::KeyN => "KeyN".to_string(),
		rdev::Key::KeyM => "KeyM".to_string(),
		rdev::Key::Comma => "Comma".to_string(),
		rdev::Key::Dot => "Dot".to_string(),
		rdev::Key::Slash => "Slash".to_string(),
		rdev::Key::Insert => "Insert".to_string(),
		rdev::Key::KpReturn => "KpReturn".to_string(),
		rdev::Key::KpMinus => "KpMinus".to_string(),
		rdev::Key::KpPlus => "KpPlus".to_string(),
		rdev::Key::KpMultiply => "KpMultiply".to_string(),
		rdev::Key::KpDivide => "KpDivide".to_string(),
		rdev::Key::Kp0 => "Kp0".to_string(),
		rdev::Key::Kp1 => "Kp1".to_string(),
		rdev::Key::Kp2 => "Kp2".to_string(),
		rdev::Key::Kp3 => "Kp3".to_string(),
		rdev::Key::Kp4 => "Kp4".to_string(),
		rdev::Key::Kp5 => "Kp5".to_string(),
		rdev::Key::Kp6 => "Kp6".to_string(),
		rdev::Key::Kp7 => "Kp7".to_string(),
		rdev::Key::Kp8 => "Kp8".to_string(),
		rdev::Key::Kp9 => "Kp9".to_string(),
		rdev::Key::KpDelete => "KpDelete".to_string(),
		rdev::Key::Function => "Function".to_string(),
		rdev::Key::Unknown(n) => format!("code:{}", n),
	}
}
